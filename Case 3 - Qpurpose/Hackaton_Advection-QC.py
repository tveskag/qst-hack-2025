import numpy as np
import matplotlib.pyplot as plt
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, transpile
from qiskit.circuit.library import RYGate, ModularAdderGate
from qiskit.circuit import Gate
from qiskit.quantum_info import Statevector
from qiskit_aer import AerSimulator
from pyqsp import angle_sequence
from pyqsp.poly import polynomial_generators, PolyTaylorSeries
import scipy as sp

# from pennylane.templates.state_preparations.mottonen import compute_theta, gray_code

# The block encoding is built from three special gates: shift, a special 2 qubit gate prep and a modular adder

"""
The python package pyqsp allows you to generate new angle sequences: https://github.com/ichuang/pyqsp

The sample code under "A guide within a guide" is the most efficient way to get started.
However, for use in the QSVT algorithm, 'phiset' as output by the sample code: 

(phiset, red_phiset, parity) = angle_sequence.QuantumSignalProcessingPhases(
    poly,
    method='sym_qsp',
    chebyshev_basis=True)

must be slightly modified. The function QSVT_format below implements the required
modification. 
"""


def QSVT_format(phiset: np.ndarray) -> np.ndarray:
    """Formats the angles for the QSVT algorithm.

    Args:
        phiset (np.ndarray): The angles generated by pyqsp.

    Returns:
        np.ndarray: The formatted angles.
    """
    n = len(phiset) - 1
    Phi = np.zeros(n)
    Phi[1:n] = phiset[1:n] - np.pi / 2
    Phi[0] = phiset[0] + phiset[-1] + ((n - 2) % 4) * np.pi / 2
    # If you use output from the MATLAB package qsppack you have to replace (n-2) by (n-1) in the above formula!
    return Phi


def QSVT_cosinus(degree_cutoff: int, max_scale: float, M_step: int):
    """
    Computes the QSVT angles for the function cos(M_step*x).

    Args:
        degree_cutoff: The degree of the Taylor series used in the QSVT algorithm.
        max_scale: The maximum rescaling value of the function.
        M_step: The frequency of the cosine function.

    Returns:
        The QSVT angles and the Taylor series.
    """
    func = lambda x: max_scale * np.cos(M_step * x)

    poly = PolyTaylorSeries().taylor_series(
        func=func, degree=degree_cutoff, max_scale=max_scale, chebyshev_basis=True, cheb_samples=2 * degree_cutoff
    )

    angles, reduced_angles, parity = angle_sequence.QuantumSignalProcessingPhases(
        poly, method="sym_qsp", chebyshev_basis=True
    )

    return QSVT_format(angles), poly


def QSVT_sinus(degree_cutoff: int, max_scale: float, M_step: int):
    """
    Computes the QSVT angles for the function sin(M_step*x).

    Args:
        degree_cutoff: The degree of the Taylor series used in the QSVT algorithm.
        max_scale: The maximum rescaling value of the function.
        M_step: The frequency of the cosine function.

    Returns:
        The QSVT angles and the Taylor series.
    """
    func = lambda x: max_scale * np.sin(M_step * x)

    poly = PolyTaylorSeries().taylor_series(
        func=func, degree=degree_cutoff, max_scale=max_scale, chebyshev_basis=True, cheb_samples=2 * degree_cutoff
    )

    angles, reduced_angles, parity = angle_sequence.QuantumSignalProcessingPhases(
        poly, method="sym_qsp", chebyshev_basis=True
    )

    return QSVT_format(angles), poly


def Shift_gate(n, ctrl_state="1") -> Gate:
    """
    n : number of qubits.

    Returns a gate implementing the shift operation
    |k> --> |k+1 (mod 2**n)> in the computational basis.
    """
    qc = QuantumCircuit(n, name="Shift")
    for j in range(n - 1):
        qc.mcx(
            [k for k in range(n - 1 - j)], n - 1 - j, ctrl_state=(n - 1 - j) * ctrl_state
        )  # Using multi controlled NOT gates
    qc.x(0)
    return qc.to_gate()


def Advection_prep(n: int, dt: int, c: float) -> list[Gate, Gate]:
    """
    n: number of spatial qubits. N = 2**n is the number of spatial grid points.
    dt: time step.
    c: advection coefficient.

    Returns a 2 qubit gate state preparation gate implementing
    |0> --> sqrt(nu*dt/2 * dx)|0> + + sqrt(c*dt/2*dx) |2>
    """
    d = 4  # The domain is fixed to be [0,4]
    dx = d / 2**n
    b = dt * c / dx
    if b > 0:
        suptheta = 2 * np.arccos(-b)  # The rotation angle needed to prepare a using an RY gate
        diatheta = 2 * np.arccos(0)
        subtheta = 2 * np.arccos(b)  # The rotation angle needed to prepare a using an RY gate
    else:
        print("The chosen values n,dt,c are not admissible. Arrange that 1>c*dt/dx")
        exit(1)

    sup = RYGate(suptheta).control(2, ctrl_state="00")
    dia = RYGate(diatheta).control(2, ctrl_state="01")
    sub = RYGate(subtheta).control(2, ctrl_state="10")

    return [sup, dia, sub]


def advection_block_encoding(n: int, dt: float, c: float) -> QuantumCircuit:
    """Implements the Block encoding for the advection matrix/operator.

    Args:
        n (int): The number of spatial qubits.
        dt (float): The time step.
        c (float): The advection coefficient.

    Returns:
        _type_: _description_
    """
    anc = QuantumRegister(3, name="anc")
    qr1 = QuantumRegister(n, name="Q1")
    qc = QuantumCircuit(anc, qr1, name="Block-2")

    [sup, dia, sub] = Advection_prep(n, dt, c)

    qc.h(anc[1:])
    qc.append(sup, anc[1:] + anc[0:1])
    qc.append(dia, anc[1:] + anc[0:1])
    qc.append(sub, anc[1:] + anc[0:1])

    L = Shift_gate(n, ctrl_state="1").control(1)
    R = Shift_gate(n, ctrl_state="0").control(1)

    qc.append(L, anc[2:3] + qr1[:])
    qc.append(R, anc[1:2] + qr1[:])

    qc.h(anc[1:])

    return qc


# The following function implements QSVT on the block encoding provided by Block_encoding
# The full circuit is then simulated with the aer-simulator using Gaussian initial conditions.
# A post-selection procedure picks out the successfull runs and arranges the results in a vector


def Initialize(n: int):
    """Initializes the quantum circuit with Gaussian initial conditions.

    Args:
        n (int): Number of spatial qubits.

    Returns:
        list[np.ndarray, np.ndarray]: The spatial grid values and the simulated y values in z.
    """
    # Preparing the initial conditions
    N = 2**n
    d = 4  # spatial domain [0,d]
    dx = 4 / N
    x = np.linspace(0, d, N, endpoint=False)
    y = np.exp(-20 * (x - d / 3) ** 2)  # Gaussian initial conditions
    y = y / np.linalg.norm(y)  # normalized to be a unit vector
    return x, y


def Advection_QSVT(deg: int, taylor_cutoff: int, n: int, dt: float, c: float, y: list[int] | None):
    """
    deg: number of time steps
    taylor_cutoff: the degree of the Taylor series used in the QSVT algorithm for the cosinus
    n: number of spatial qubits
    dt: time step
    c: advection coefficient
    shots: number of shots used in the aer-simulator
    show_gate_count: True or False according to whether gate counts should be printed

    The function implements QSVT for the function e^{ix} on Block_encoding(n,dt,nu)
    yielding a quantum circuit. The circuit is then measured in the computational basis.

    The circuit is initalized with normalized Gaussian initial conditions over
    [0,d=4] with N = 2**n uniformly distributed grid points.

    The circuit is simulated using the aer-simulator with shots = shots.

    A post-selection procedure picks out the successfull runs and arranges the results in
    a vector z.

    Returns x,z the spatial grid values and the simulated y values in z.
    """
    # Setting up the circuit
    qraO = QuantumRegister(1)  # Ancilla register on 1 qubit used in OAA
    qraS = QuantumRegister(2)  # Ancilla register on 1 qubit used in QSVT
    qraB = QuantumRegister(3)  # Ancilla register on 1 qubit used in Block_encoding
    qr1 = QuantumRegister(n)  # qr1 and qr2 are the same as in Block_encoding
    # qr2 = QuantumRegister(n)

    craO = ClassicalRegister(1)
    craS = ClassicalRegister(2)
    craB = ClassicalRegister(3)
    cr1 = ClassicalRegister(n)
    # cr2 = ClassicalRegister(n)

    qc = QuantumCircuit(qraO, qraS, qraB, qr1, craO, craS, craB, cr1)
    # qc = QuantumCircuit(qra, qr1, qr2, cra, cr1, cr2)

    # Preparing the initial conditions
    if y is None:
        _, y = Initialize(n)
    qc.prepare_state(Statevector(y), qr1)

    U = advection_block_encoding(n, dt, c)  # Block encoding circuit
    # U.draw(output='latex', filename='block.pdf')

    (Phi_cos, _) = QSVT_cosinus(degree_cutoff=taylor_cutoff, max_scale=0.5, M_step=deg)  # Extracting the angle sequence
    (Phi_sin, _) = QSVT_sinus(
        degree_cutoff=taylor_cutoff + 2, max_scale=0.5, M_step=deg
    )  # Extracting the angle sequence

    def QSVT():
        # Applying the QSVT circuit
        qraS = QuantumRegister(2)  # Ancilla register on 1 qubit used in QSVT
        qraB = QuantumRegister(3)  # Ancilla register on 1 qubit used in Block_encoding
        qr1 = QuantumRegister(n)  # qr1 and qr2 are the same as in Block_encoding

        qcCop = QuantumCircuit(qraS, qraB, qr1)

        qcCop.h(qraS[:])
        s = 0
        for k in range(len(Phi_cos) - 1, -1, -1):
            qcCop.mcx(qraB[:], qraS[1], ctrl_state=3 * "0")
            qcCop.crz(2 * Phi_cos[k], qraS[0], qraS[1], ctrl_state="0")
            qcCop.crz(2 * Phi_sin[k + 1], qraS[0], qraS[1], ctrl_state="1")
            qcCop.mcx(qraB[:], qraS[1], ctrl_state=3 * "0")

            if s == 0:
                qcCop.append(U, qraB[:] + qr1[:])
                s = 1
            else:
                if k != 0:
                    qcCop.append(U.inverse(), qraB[:] + qr1[:])
                    s = 0
                else:
                    qcCop.append(U.control(1), qraS[0:1] + qraB[:] + qr1[:])

        qcCop.mcx(qraB[:], qraS[1], ctrl_state=3 * "0")
        qcCop.crz(2 * Phi_sin[0], qraS[0], qraS[1], ctrl_state="1")
        qcCop.mcx(qraB[:], qraS[1], ctrl_state=3 * "0")

        qcCop.p(-np.pi / 2, qraS[0])
        qcCop.h(qraS[:])

        return qcCop

    qsvt = QSVT()

    OOAngles = [-np.pi * 3 / 2, np.pi / 2, np.pi / 2, np.pi / 2]
    qc.mcx(qraS[:] + qraB[:] + qr1[:], qraO[0], ctrl_state=(n + 2 + 3) * "0")
    qc.rz(2 * OOAngles[3], qraO[0])
    qc.mcx(qraS[:] + qraB[:] + qr1[:], qraO[0], ctrl_state=(n + 2 + 3) * "0")

    qc.append(qsvt, qraS[:] + qraB[:] + qr1[:])

    qc.mcx(qraS[:] + qraB[:] + qr1[:], qraO[0], ctrl_state=(n + 2 + 3) * "0")
    qc.rz(2 * OOAngles[2], qraO[0])
    qc.mcx(qraS[:] + qraB[:] + qr1[:], qraO[0], ctrl_state=(n + 2 + 3) * "0")

    qc.append(qsvt.inverse(), qraS[:] + qraB[:] + qr1[:])

    qc.mcx(qraS[:] + qraB[:] + qr1[:], qraO[0], ctrl_state=(n + 2 + 3) * "0")
    qc.rz(2 * OOAngles[1], qraO[0])
    qc.mcx(qraS[:] + qraB[:] + qr1[:], qraO[0], ctrl_state=(n + 2 + 3) * "0")

    qc.append(qsvt, qraS[:] + qraB[:] + qr1[:])

    qc.mcx(qraS[:] + qraB[:] + qr1[:], qraO[0], ctrl_state=(n + 2 + 3) * "0")
    qc.rz(2 * OOAngles[0], qraO[0])
    qc.mcx(qraS[:] + qraB[:] + qr1[:], qraO[0], ctrl_state=(n + 2 + 3) * "0")

    qc.x(qraO[0])
    qc.z(qraO[0])
    qc.x(qraO[0])

    # Measurements
    qc.measure(qraO, craO)
    qc.measure(qraS, craS)
    qc.measure(qraB, craB)
    qc.measure(qr1, cr1)

    # qc.draw(output="latex", filename="circuit.pdf")
    return qc


def Simulator(
    n: int, qc: QuantumCircuit, shots: int = 10**4, show_gate_count: bool = False
) -> tuple[np.ndarray, np.ndarray]:
    """Simulates the quantum circuit and postselects the results.

    Args:
        n (int): Number of spatial qubits.
        qc (QuantumCircuit): The quantum circuit to simulate.
        shots (int, optional): The number of measurements performed. Defaults to 10**4.
        show_gate_count (bool, optional): Whether to show a summary of the gate counts of the circuit
        after transpilation. Defaults to False.

    Returns:
        _type_: _description_
    """

    # Running the circuit
    sim = AerSimulator()
    qc_comp = transpile(qc, sim)
    res = sim.run(qc_comp, shots=shots).result()
    counts = res.get_counts(0)

    # Printing gate counts
    if show_gate_count:
        dict = qc_comp.count_ops()
        gate_1q = 0
        gate_2q = 0
        for key in dict:
            if key[0] == "c":
                gate_2q += dict[key]
            elif key != "measure":
                gate_1q += dict[key]

        print("1 qubit gates:", gate_1q)
        print("2 qubit gates:", gate_2q)
        print("Total:", gate_1q + gate_2q)

        print("Circuit depth after transpiling:", qc_comp.depth())

    # Postselection
    select = (3 + 3) * "0"
    total = 0  # Tracks the number of successfull outcomes
    z = np.zeros(2**n)  # The results are encoded in z
    for key in counts:
        L = key.split()
        if L[1] + L[2] + L[3] != select:
            shots -= counts[key]  # By construction all amplitudes are positive real numbers
    for key in counts:
        L = key.split()
        if L[1] + L[2] + L[3] == select:
            z[int(L[0], 2)] = np.sqrt(counts[key] / shots)  # By construction all amplitudes are positive real numbers
            total += counts[key]  # so this actually recovers them!
    success_rate = total / shots
    print("Success rate =", success_rate)
    x, _ = Initialize(n)
    return x, z


def Euler_advection(deg: int, n: int, dt: float, c: float) -> tuple[np.ndarray, np.ndarray, np.ndarray]:
    """Evolves the initial Gaussian distribution under the Euler scheme.
    Args:
        deg: number of time steps
        n: N=2**n is the number of spatial grid points
        dt: time step
        nu: diffusion coefficient

    Returns x,y,w where x are the spatial grid points,
    y and z are the function values at x at time t=0 and t=deg*dt, respectively.
    """
    N = 2**n
    d = 4  # Domain [0,d]
    dx = d / N
    x = np.linspace(0, d, N, endpoint=False)

    b = (-1j * dt * c) / (2 * dx)
    B = b * np.diag(np.ones(N - 1), 1) - b * np.diag(np.ones(N - 1), -1)
    B[0][-1] = -1 * b
    B[-1][0] = 1 * b

    y = np.exp(-20 * (x - d / 3) ** 2)
    y = y / np.linalg.norm(y)

    e_iht = sp.linalg.expm(-1j * B * deg)

    w = np.matmul(e_iht, y)
    return x, y, w


def Compare_plots(deg=10, n=5, dt=0.1, c=0.02, shots=10**6, iter=10):
    # Plots the initial distribution and the results of the classical and quantum simulations at t = deg*dt
    z = None
    for k in range(iter):
        qc = Advection_QSVT(deg, 6, n, dt, c, z)
        x, z = Simulator(n, qc, shots=shots, show_gate_count=False)

    T = deg * dt
    x, y, w = Euler_advection(iter * deg, n, dt, c)
    plt.plot(x, y, x, w, x, z)
    plt.legend(["Classical T=0", "Classical T=" + str(T), "Quantum T=" + str(T)])
    plt.savefig("advection.png")
    plt.show()


def Visualize_matrix(n=5, dt=0.1, c=0.02):
    """Visualizes the representation of the block encoding.

    Args:
        n (int, optional): NUmber of physical qubits. Defaults to 5.
        dt (float, optional): Time step. Defaults to 0.1.
        c (float, optional): Advection coefficient. Defaults to 0.02.
    """

    U = advection_block_encoding(n, dt, c)  # Block encoding circuit
    # This requires an external package in order to compile the pdf.
    # U.decompose("Shift").draw(output='latex', filename='block.pdf')

    u = np.zeros(2**n).astype(complex)
    for j in range(2**n):
        b = 3 * "0" + f"{j:0{n}b}"  # [::-1]
        state = Statevector.from_label(b).evolve(U).reverse_qargs()
        for i in range(0, 2**n):
            index = i * 2 ** (3)
            u[i] = np.round(state[index], decimals=3)
            # print(index)
        print(u)
        # stateM = np.round(state, decimals=3)
        # print(stateM)


Compare_plots(deg=1, n=6, dt=0.06, c=0.99, shots=10**6, iter=7)
# Visualize_matrix(n = 3, dt = 0.05, c = 0.8)
